"""
Telegram –ë–æ—Ç: –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä —Ä–∞—Ü–∏–æ–Ω–∞ "–õ–æ–∂–∫–∞_–±–æ—Ç"
–ê–≤—Ç–æ—Ä: Enzhe Akhmetova
GitHub: https://github.com/enaenaenahm
–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è: 2025
"""
import logging
import random
import asyncio
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
import re
import os
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from datetime import datetime
from collections import defaultdict
from aiogram.types import Message
from PIL import Image
from datetime import datetime
from openpyxl import Workbook
from io import BytesIO
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter
import traceback
from aiogram.utils.keyboard import InlineKeyboardBuilder

DB_CONFIG = {
    "user": "my_user",
    "password": "root",
    "database": "diet_bot_db",
    "host": "localhost",
    "port": "5432"
}

NAME_REGEX = re.compile(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]+$')

logging.basicConfig(level=logging.INFO)
API_TOKEN = "8130078332:AAG5ISPKao2NGXD5TzrU1nNAdiIeZO_1wPs"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Registration(StatesGroup):
    name = State()
    confirm = State()

class FeedbackForm(StatesGroup):
    waiting_for_message = State()

# tables in a database
async def init_db():
    pool = await asyncpg.create_pool(**DB_CONFIG)
    async with pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                name TEXT NOT NULL,
                registered_at TIMESTAMP DEFAULT NOW()
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS recipes (
                recipe_id SERIAL PRIMARY KEY,
                meal_type TEXT NOT NULL,
                content TEXT NOT NULL,
                is_premium BOOLEAN DEFAULT FALSE
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                subscription_id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(user_id),
                start_date TIMESTAMP,
                end_date TIMESTAMP
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS feedback (
                feedback_id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(user_id),
                message TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT NOW()
            )
        ''')
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS user_limits (
                user_id BIGINT PRIMARY KEY,
                weekly_used INT DEFAULT 0,
                subscribed BOOLEAN DEFAULT FALSE
            )
        ''')
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS user_sent_recipes (
                user_id BIGINT,
                recipe_id INT,
                meal_type TEXT,
                PRIMARY KEY (user_id, recipe_id)
            )
        ''')
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS user_meal_limits (
                user_id BIGINT REFERENCES users(user_id),
                meal_type TEXT,
                used_count INTEGER DEFAULT 0,
                PRIMARY KEY (user_id, meal_type)
    )
        ''')
    await pool.close()

# Class for working with recipes
class RecipeCRUD:
    def __init__(self, pool):
        self.pool = pool

    async def get_recipes_by_meal_type(self, meal_type: str, include_premium: bool = False):
        async with self.pool.acquire() as conn:
            return await conn.fetch(
                "SELECT * FROM recipes WHERE meal_type = $1 AND (is_premium = FALSE OR $2 = TRUE)",
                meal_type, 
                include_premium
            )
    async def get_all_free_recipes(self):
        async with self.pool.acquire() as conn:
            return await conn.fetch('SELECT * FROM recipes WHERE is_premium = FALSE')

    async def get_free_recipes(self, meal_type: str):
        async with self.pool.acquire() as conn:
            return await conn.fetch('''
                SELECT * FROM recipes
                WHERE meal_type = $1 AND is_premium = FALSE
            ''', meal_type)

    async def get_recipes_by_meal(self, meal_type: str, subscribed: bool = False):
        query = "SELECT * FROM recipes WHERE meal_type = $1"
        if not subscribed:
            query += " AND is_premium = FALSE"

        async with self.pool.acquire() as conn:
            return await conn.fetch(query, meal_type)
    async def get_all_recipes(self, subscribed: bool = False):
        query = "SELECT * FROM recipes"
        if not subscribed:
            query += " WHERE is_premium = FALSE"

        async with self.pool.acquire() as conn:
            return await conn.fetch(query)


# Keyboards
async def main_kb(is_registered: bool):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–∞—Ü–∏–æ–Ω üçΩ"), KeyboardButton(text="–£—Å–ª—É–≥–∏ üíº")],
            [KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üì©")]
        ] if is_registered else [[KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]],
        resize_keyboard=True
    )


def services_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ üîì"), KeyboardButton(text="–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ üë®‚Äçüç≥")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
def weekly_menu_options_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="week_daily"),
            InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ 2-3 –¥–Ω—è", callback_data="week_bulk")
        ]
    ])

def diet_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞–∫"), KeyboardButton(text="–û–±–µ–¥")],
            [KeyboardButton(text="–£–∂–∏–Ω"), KeyboardButton(text="–ü–µ—Ä–µ–∫—É—Å")],
            [KeyboardButton(text="–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å"), KeyboardButton(text="–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def start(message: types.Message):
    user_name = message.from_user.first_name
    pool = await asyncpg.create_pool(**DB_CONFIG)
    async with pool.acquire() as conn:
        user = await conn.fetchrow(
            'SELECT * FROM users WHERE user_id = $1', message.from_user.id
        )
    await pool.close()
    is_registered = bool(user)
    if not is_registered:
        text = (
            "–≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è –≤–∞—Å, –µ—Å–ª–∏ –≤—ã:\n"
        "üîπ —É—Å—Ç–∞–ª–∏ –æ—Ç –æ–¥–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π –µ–¥—ã –≤ —Å–≤–æ–µ–π —Ç–∞—Ä–µ–ª–∫–µ\n"
        "üîπ –∏—â–µ—Ç–µ –∞–¥–µ–∫–≤–∞—Ç–Ω—É—é —Å—Ö–µ–º—É –ø–∏—Ç–∞–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "üîπ—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–µ –≤—Ä–µ–º—è –∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —á–∞—Å–∞–º–∏ —Å—Ç–æ—è—Ç—å –Ω–∞ –∫—É—Ö–Ω–µ\n"
        "–∏ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ, —É—Å—Ç–∞–ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å–æ–º \"—á—Ç–æ –∂–µ –º–Ω–µ —Å–µ–≥–æ–¥–Ω—è –ø–æ–µ—Å—Ç—å?\"ü§î\n"
        "ü•ó–ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç?\n"
        "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –∏–∑ –±–∞–∑—ã –∏–ª–∏ –±—ã—Å—Ç—Ä–æ –∏ –ª–∏—á–Ω–æ –¥–ª—è –≤–∞—Å —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –≤–∫—É—Å–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –∏–∑ 4 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å/—Ü–µ–ª—É—é –Ω–µ–¥–µ–ª—é —Å—Ä–∞–∑—É üìã\n"
        "–ú—ã –≥–æ—Ç–æ–≤—ã –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ –∑–∞–±–æ—Ç—ã –æ –≤–∞—à–µ–º –ø–∏—Ç–∞–Ω–∏–∏ –Ω–∞ —Å–µ–±—è!\n"
        "–°–¥–µ–ª–∞–µ–º –µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º, –≤–∫—É—Å–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º! –ñ–º–∏ –∫–Ω–æ–ø–∫—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ü´∂"
            )
    else:
        user_name = user['name']
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—è, —è —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä üèãÔ∏è‚Äç‚ôÄÔ∏è –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ ü•¶\n\n"
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}! ü´∂\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã —Å –Ω–∞–º–∏ ‚Äî –∞ –∑–Ω–∞—á–∏—Ç, –ø—É—Ç—å –∫ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–º—É –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é —Å—Ç–∞–ª –∫–æ—Ä–æ—á–µ üöÄ\n"
            "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ —Ç–æ–º, —á—Ç–æ —Ä–µ—Ü–µ–ø—Ç—ã —Å–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, "
            "–≥–æ—Ç–æ–≤—è—Ç—Å—è –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ. –ê –≥–ª–∞–≤–Ω–æ–µ ‚Äî –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª–µ–∑–µ–Ω –∏ –≤–∫—É—Å–µ–Ω. "
            "–¢–≤–æ–µ —Ç–µ–ª–æ —Ç–æ—á–Ω–æ –æ—Ü–µ–Ω–∏—Ç –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–∞—Ü–∏–æ–Ω–∞. ü•ó\n\n"
            "–í–æ—Ç —á—Ç–æ —É–º–µ–µ—Ç –Ω–∞—à –±–æ—Ç:\n"
            "üç≥ –ü–æ–¥–±–∏—Ä–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ‚Äî —Å–ª—É—á–∞–π–Ω–æ, –±—ã—Å—Ç—Ä–æ, –±–µ–∑ –º—É–∫ –≤—ã–±–æ—Ä–∞\n"
            "üßæ –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é: –≤–∫—É—Å–Ω–æ, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ, —É–¥–æ–±–Ω–æ\n"
            "üõí –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ ‚Äî –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ\n\n"
            "–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º—É –Ω–∞–±–æ—Ä—É —Ä–µ—Ü–µ–ø—Ç–æ–≤ ‚Äî –ø–æ 3 –Ω–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ "
            "(–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω, –ø–µ—Ä–µ–∫—É—Å). –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏ –≤–ª—é–±–∏—Ç—å—Å—è üíõ\n\n"
            "–ê –≤–æ—Ç —á—Ç–æ –¥–∞—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∞:\n"
            "‚ú® –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª—å—à–æ–π –±–∞–∑–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
            "üìÖ –ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é —Å—Ç–∞–Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º ‚Äî –±–æ–ª—å—à–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤, –±–æ–ª—å—à–µ –∫–æ–º–±–æ, –Ω–∏–∫–∞–∫–æ–π –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –µ–¥—ã\n\n"
            "–ì–æ—Ç–æ–≤ –ø—Ä–æ–±–æ–≤–∞—Ç—å? –ù–∞—á–Ω–∏ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî —É–∂–µ —Å–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–±—Ä–∞—Ç—å *–†–∞—Ü–∏–æ–Ω* –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ —ç—Ç–æ —É–¥–æ–±–Ω–æ!\n"
            "–ê –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤—Å–µ–≥–æ –≤ –¥–≤–∞ –∫–ª–∏–∫–∞ –ø—Ä—è–º–æ –≤ —Ä–∞–∑–¥–µ–ª–µ *–£—Å–ª—É–≥–∏* üôå"
        )
    await message.answer(text, reply_markup=await main_kb(is_registered))

# Registration
@dp.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    pool = await asyncpg.create_pool(**DB_CONFIG)
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT * FROM users WHERE user_id = $1', message.from_user.id)
    await pool.close()
    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=await main_kb(message.from_user.id))
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Registration.name)


@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    if not NAME_REGEX.fullmatch(message.text):
        await message.answer("‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ/–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(name=message.text)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö (–î–∞/–ù–µ—Ç):")
    await state.set_state(Registration.confirm)


@dp.message(Registration.confirm)
async def process_confirm(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        pool = await asyncpg.create_pool(**DB_CONFIG)
        async with pool.acquire() as conn:
            await conn.execute('''
                INSERT INTO users(user_id, name)
                VALUES($1, $2)
                ON CONFLICT (user_id) DO NOTHING
            ''', user_id, data['name'])
        await pool.close()
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=await main_kb(True))
    else:
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=await main_kb(False))
    await state.clear()

@dp.message(F.text == "–£—Å–ª—É–≥–∏ üíº")
async def services_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_kb())

@dp.message(F.text == "–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ üë®‚Äçüç≥")
async def support_service(message: types.Message):
    photo = FSInputFile("images/support.jpg")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º üí¨", url="https://t.me/egorova_aliya")]
        ]
    )
    await message.answer_photo(
        photo=photo,
        caption="–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—è, —è —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä üèãÔ∏è‚Äç‚ôÄÔ∏è –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ ü•¶!\n\n"
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π:\n\n"
            "–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ \"–æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç —Å–ª–∞–¥–∫–æ–≥–æ üç∞, –Ω–µ –µ—à—å –ø–æ—Å–ª–µ 18:00 ‚è∞, –∏–¥–∏ –ø–æ–±–µ–≥–∞–π üèÉ‚Äç‚ôÄÔ∏è –∏ —Ç–æ–≥–¥–∞ —Ç—ã –ø–æ—Ö—É–¥–µ–µ—à—å\"."
            "–≠—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ–±—Ä–∞–∑–æ–º –∂–∏–∑–Ω–∏ üå±.\n\n"
            "–£ –º–µ–Ω—è –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ \"–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\" üìâ.\n"
            "–° –∫–∞–∂–¥—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –º—ã –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤–æ–π –ø—É—Ç—å üõ§:\n"
            "ü•ó —Ä–∞—Ü–∏–æ–Ω,\n"
            "üõí –Ω–∞–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤,\n"
            "üí™ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏,\n"
            "üõè —Ä–µ–∂–∏–º,\n"
            "üîÅ –ø—Ä–∏–≤—ã—á–∫–∏.\n"
            "–í—Å–µ —ç—Ç–∏ —à–∞–≥–∏ –≤–≤–æ–¥–∏–º –≤ –∂–∏–∑–Ω—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –ø–æ—ç—Ç–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –ø–ª–∞–≤–Ω–æ, –Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ üîí.\n\n"
            "–†–∞–±–æ—Ç–∞ —Å–æ –º–Ω–æ–π ‚Äî —ç—Ç–æ —Å–±–æ—Ä –º–æ–µ–≥–æ –æ–ø—ã—Ç–∞, –∑–Ω–∞–Ω–∏–π, —Å–µ–∫—Ä–µ—Ç–∏–∫–æ–≤, –ª–∞–π—Ñ—Ö–∞–∫–æ–≤ –∏ —Ñ–∏—à–µ–∫ ‚ú®.\n"
            "–ß—Ç–æ–±—ã –ø—É—Ç—å –∫ —Ç–µ–ª—É –º–µ—á—Ç—ã –∏ –ª—é–±–≤–∏ –∫ —Å–µ–±–µ –ø—Ä–æ—à—ë–ª –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ ü§ç\n",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.message(F.text == "–†–∞—Ü–∏–æ–Ω üçΩ")
async def show_diet_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏:", reply_markup=diet_kb())

# resipes
@dp.message(F.text.in_({"–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω", "–ü–µ—Ä–µ–∫—É—Å"}))
async def random_recipe(message: types.Message):
    user_id = message.from_user.id
    meal_type = message.text.lower()
    meal_type_ru = message.text  # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    pool = await asyncpg.create_pool(**DB_CONFIG)
    async with pool.acquire() as conn:
        try:
            # Checking the user's subscription
            user = await conn.fetchrow(
                "SELECT subscribed FROM users WHERE user_id = $1", 
                user_id
            )        
            if user and user['subscribed']:
                # For subscribers - no restrictions
                recipes = await conn.fetch(
                    """
                    SELECT r.recipe_id, r.content
                    FROM recipes r
                    WHERE r.meal_type = $1
                    AND r.recipe_id NOT IN (
                        SELECT recipe_id FROM user_sent_recipes
                        WHERE user_id = $2 AND meal_type = $1
                    )
                    """,
                    meal_type, user_id
                )
            else:
                # Updating the usage counter
                result = await conn.fetchrow(
                    """
                    INSERT INTO user_meal_limits (user_id, meal_type, used_count)
                    VALUES ($1, $2, 1)
                    ON CONFLICT (user_id, meal_type) 
                    DO UPDATE SET used_count = user_meal_limits.used_count + 1
                    RETURNING used_count
                    """,
                    user_id, meal_type
                )            
                if result['used_count'] > 3:
                    await message.answer(
                        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è '{meal_type_ru}' –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n"
                        "–¢—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. üç≥\n"
                        "–•–æ—á–µ—à—å –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è?\n"
                        "–í –ø–æ–¥–ø–∏—Å–∫–µ - –±–æ–ª—å—à–∞—è –±–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤, –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–µ–ø–æ—Ö–æ–∂ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π!\n"
                        "–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –∑–∞ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤ –∏ –æ—Ç–∫—Ä–æ–π –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø!üí´ \n",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")
                        ]])
                    )
                    return
                # We only receive free recipes that have not been shown yet
                recipes = await conn.fetch(
                    """
                    SELECT r.recipe_id, r.content
                    FROM recipes r
                    WHERE r.meal_type = $1
                    AND r.is_premium = FALSE
                    AND r.recipe_id NOT IN (
                        SELECT recipe_id FROM user_sent_recipes
                        WHERE user_id = $2 AND meal_type = $1
                    )
                    """,
                    meal_type, user_id
                )
            if recipes:
                chosen = random.choice(recipes)
                recipe_text = chosen['content']
                recipe_id = chosen['recipe_id']
                await message.answer(f"üç¥ {meal_type_ru}:\n{recipe_text}")
                await conn.execute(
                    "INSERT INTO user_sent_recipes (user_id, recipe_id, meal_type) VALUES ($1, $2, $3)",
                    user_id, recipe_id, meal_type
                )
            else:
                await message.answer("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logging.error(f"Error: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")       
    await pool.close()

@dp.callback_query(F.data == "subscribe")
async def handle_subscribe(callback: CallbackQuery):
    pool = await asyncpg.create_pool(**DB_CONFIG)
    async with pool.acquire() as conn:
        user_id = callback.from_user.id
        await conn.execute(
            "UPDATE users SET subscribed = TRUE WHERE user_id = $1",
            user_id
        )
        await conn.execute(
            """
            INSERT INTO user_limits (user_id, daily_used, weekly_used)
            VALUES ($1, 0, 0)
            ON CONFLICT (user_id)
            DO UPDATE SET daily_used = 0, weekly_used = 0
            """,
            user_id
        )
    await callback.message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã *–≤—Å–µ* —Ä–µ—Ü–µ–ø—Ç—ã –∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –º–µ–Ω—é. üéâ",
        parse_mode="Markdown"
    )
    await callback.answer()
        
@dp.message(F.text == "–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å")
async def daily_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id
    pool = await asyncpg.create_pool(**DB_CONFIG)
    crud = RecipeCRUD(pool)
    
    try:
        async with pool.acquire() as conn:
            # Checking subscription from users table as in weekly_batch_menu
            subscribed = await conn.fetchval(
                "SELECT subscribed FROM users WHERE user_id = $1", 
                user_id
            ) or False

            # Limit logic for UNsubscribed only
            if not subscribed:
                # Check current limits from user_limits
                record = await conn.fetchrow(
                    "SELECT daily_used FROM user_limits WHERE user_id = $1",
                    user_id
                )
                
                # Initialization on first use
                if not record:
                    await conn.execute(
                        "INSERT INTO user_limits(user_id, daily_used) VALUES ($1, 0)",
                        user_id
                    )
                    remaining = 3
                else:
                    remaining = 3 - record['daily_used']

                # Blocking when limits are exhausted
                if remaining <= 0:
                    return await message.answer(
                        "–¢—ã —É–∂–µ —Å–æ—Å—Ç–∞–≤–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω—ã—Ö –º–µ–Ω—é, –Ω–æ —Å —Ç–∞–∫–∏–º –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏—Ö —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.\n"
                        "–ú–µ–Ω—é –±—ã—Å—Ç—Ä–æ –Ω–∞–¥–æ–µ—Å—Ç, –∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.ü•≤\n"
                        "–ê –≤–µ–¥—å –æ–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥—Ç—è–Ω—É—Ç—å –∫–æ–∂—É, —É–ª—É—á—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—Ü–∞, –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –æ—Ç–µ–∫–æ–≤ –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –ª–µ–≥–∫–æ—Å—Ç—å –≤ —Ç–µ–ª–µ.üí™\n"
                        "–•–æ—á–µ—à—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π?\n"
                        "–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –æ—Ç–∫—Ä–æ–π –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª—å—à–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ü–µ–ø—Ç–æ–≤ - –≤—Å–µ–≥–æ –ø–∞—Ä–∞ –∫–ª–∏–∫–æ–≤!üí´\n",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")
                        ]])
                    )
                # Counter update
                await conn.execute(
                    "UPDATE user_limits SET daily_used = daily_used + 1 WHERE user_id = $1",
                    user_id
                )
        # Receiving recipes with your subscription
        meals = ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "–ø–µ—Ä–µ–∫—É—Å", "—É–∂–∏–Ω"]
        all_recipes = {}
        for meal in meals:
            recipes = await crud.get_recipes_by_meal_type(
                meal_type=meal,
                include_premium=subscribed  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
            )
            all_recipes[meal] = recipes or []
        await state.update_data(
            all_recipes=all_recipes,
            current_meal_index=0,
            current_recipe_index=0,
            selected_recipes={}
        )
        await show_current_recipe(message, state)     
    except Exception as e:
        logging.error(f"Error in daily_menu: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üõ†Ô∏è")
    finally:
        await pool.close()

async def show_current_recipe(message: Message, state: FSMContext):
    data = await state.get_data()
    all_recipes = data['all_recipes']
    current_meal_index = data['current_meal_index']
    current_recipe_index = data.get('current_recipe_index', 0)
    meals = list(all_recipes.keys())

    if current_meal_index >= len(meals):
        selected_recipes = data['selected_recipes']
        selected_text = ""
        for meal, recipes in selected_recipes.items():
            selected_text += f"\n\n{get_emoji(meal)} {meal.capitalize()}:\n"
            for recipe in recipes:
                selected_text += f"- {recipe['content']}\n"

        # Generate a shopping list
        shopping_list = await generate_shopping_list(selected_recipes)
        await message.answer(f"–í–∞—à–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å:\n{selected_text}")
        return await message.answer(f"üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n{shopping_list}")
    meal = meals[current_meal_index]
    recipes = all_recipes[meal]
    if not recipes:
        recipe_text = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"
    else:
        recipe = recipes[current_recipe_index % len(recipes)]
        recipe_text = recipe['content']
    text = f"{get_emoji(meal)} {meal.capitalize()}:\n{recipe_text}"
    builder = InlineKeyboardBuilder()
    if recipes:
        builder.button(text="‚¨ÖÔ∏è", callback_data="prev_recipe")
        builder.button(text="‚û°Ô∏è", callback_data="next_recipe")

    builder.button(text="‚úÖ", callback_data="next_meal")
    await message.answer(text, reply_markup=builder.as_markup())

async def generate_shopping_list(selected_recipes: dict) -> str:
    shopping_items = {}
    for meal, recipes in selected_recipes.items():
        for recipe in recipes:
            ingredients = recipe.get("ingredients")
            if not ingredients:
                parsed = parse_recipe_content(recipe.get("content", ""))
                parsed_ingredients = parse_ingredients(parsed.get("ingredients", ""))
                ingredients = [
                    {
                        "name": name,
                        "quantity": amount,
                        "unit": unit
                    } for name, amount, unit in parsed_ingredients
                    if amount > 0  # ‚Üê —Ñ–∏–ª—å—Ç—Ä—É–µ–º "–ø–æ –≤–∫—É—Å—É"
                ]
            for ingredient in ingredients:
                name = ingredient["name"]
                quantity = ingredient.get("quantity", 0)
                unit = ingredient.get("unit", "").lower()
                if quantity <= 0:
                    continue
                key = (name, unit)
                if key in shopping_items:
                    shopping_items[key] += quantity
                else:
                    shopping_items[key] = quantity
    shopping_list = ""
    for (name, unit), quantity in shopping_items.items():
        quantity = round(quantity, 2)
        unit_display = f" {unit}" if unit else ""
        shopping_list += f"‚Ä¢ {name} ‚Äì {quantity}{unit_display}\n"
    return shopping_list

def get_emoji(meal: str) -> str:
    emojis = {
        "–∑–∞–≤—Ç—Ä–∞–∫": "üç≥",
        "–æ–±–µ–¥": "üç≤",
        "—É–∂–∏–Ω": "ü•ó",
        "–ø–µ—Ä–µ–∫—É—Å": "ü•™"
    }
    return emojis.get(meal, "üçΩ")

# Daily Menu Button Handlers
@dp.callback_query(F.data == "next_recipe")
async def next_recipe(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("current_recipe_index", 0)
    await state.update_data(current_recipe_index=current_index + 1)
    await callback.message.delete()
    await show_current_recipe(callback.message, state)

@dp.callback_query(F.data == "prev_recipe")
async def prev_recipe(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("current_recipe_index", 0)
    await state.update_data(current_recipe_index=max(0, current_index - 1))
    await callback.message.delete()
    await show_current_recipe(callback.message, state)

@dp.callback_query(F.data == "next_meal")
async def next_meal(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_meal_index = data.get("current_meal_index", 0)
    current_recipe_index = data.get("current_recipe_index", 0)
    selected_recipes = data.get('selected_recipes', {})
    meal = list(data['all_recipes'].keys())[current_meal_index]
    recipes = data['all_recipes'][meal]
    if recipes:
        selected_recipes[meal] = selected_recipes.get(meal, [])
        selected_recipes[meal].append(recipes[current_recipe_index % len(recipes)])
    await state.update_data(
        current_meal_index=current_meal_index + 1,
        current_recipe_index=0,  
        selected_recipes=selected_recipes
    )
    await callback.message.delete()
    await show_current_recipe(callback.message, state)

@dp.message(F.text == "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def choose_weekly_menu_mode(message: types.Message):
    await message.answer(
        "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª—é?\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –±–ª—é–¥–∞ –∏–ª–∏ –∑–∞–≥–æ—Ç–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞ 2-3 –¥–Ω—è?üëá",
        reply_markup=weekly_menu_options_kb()
    )
# Menu Button Handlers for the Week
@dp.callback_query(F.data == "week_daily")
async def generate_weekly_menu_daily(callback: CallbackQuery):
    await handle_weekly_menu(callback, mode="daily")

@dp.callback_query(F.data == "week_bulk")
async def generate_weekly_menu_bulk(callback: CallbackQuery):
    await handle_weekly_menu(callback, mode="bulk")

@dp.message(F.text == "–ì–æ—Ç–æ–≤–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")
async def weekly_varied_menu(message: types.Message):
    user_id = message.from_user.id
    pool = await asyncpg.create_pool(**DB_CONFIG)
    crud = RecipeCRUD(pool)

    try:
        async with pool.acquire() as conn:
            # Subscription check
            subscribed = await conn.fetchval(
                "SELECT subscribed FROM users WHERE user_id = $1", 
                user_id
            ) or False

            if not subscribed:
                await message.answer(
                    "ü•ó –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")
                    ]])
                )
                return
            # Get recipes for every meal
            meals = ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "–ø–µ—Ä–µ–∫—É—Å", "—É–∂–∏–Ω"]
            recipes_by_meal_type = {}       
            for meal in meals:
                recipes = await crud.get_recipes_by_meal_type(
                    meal_type=meal,
                    include_premium=subscribed
                )
                recipes_by_meal_type[meal] = [r['content'] for r in recipes]

            # Excel
            excel_file = generate_weekly_excel_varied(recipes_by_meal_type)
            
            await message.answer_document(
                document=types.BufferedInputFile(
                    file=excel_file.getvalue(),
                    filename=f"varied_menu_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
                ),
                caption="üìÖ –ú–µ–Ω—é: –≥–æ—Ç–æ–≤–∏–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"  
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await pool.close()

@dp.message(F.text == "–ì–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ 2-3 –¥–Ω—è")
async def weekly_batch_menu(message: types.Message):
    user_id = message.from_user.id
    pool = await asyncpg.create_pool(**DB_CONFIG)
    crud = RecipeCRUD(pool)
    try:
        async with pool.acquire() as conn:
            subscribed = await conn.fetchval(
                "SELECT subscribed FROM users WHERE user_id = $1", 
                user_id
            ) or False
            meals = ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "–ø–µ—Ä–µ–∫—É—Å", "—É–∂–∏–Ω"]
            recipes_by_meal_type = {}   
            for meal in meals:
                recipes = await crud.get_recipes_by_meal_type(
                    meal_type=meal,
                    include_premium=subscribed
                )
                recipes_by_meal_type[meal] = [r['content'] for r in recipes]

            # Excel
            excel_file = generate_bulk_excel(recipes_by_meal_type)
            
            await message.answer_document(
                document=types.BufferedInputFile(
                    file=excel_file.getvalue(),
                    filename=f"batch_menu_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
                ),
                caption="üßä –ú–µ–Ω—é: –≥–æ—Ç–æ–≤–∏–º –Ω–∞ 2‚Äì3 –¥–Ω—è"  
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await pool.close()
        # Excel
        logging.info(f"Start generating menu for user {user_id}")
        all_recipes = await crud.get_all_free_recipes()
        if not all_recipes:
            await message.answer("üòî –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤")
            return
        recipes_by_meal_type = {}
        meals = ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "–ø–µ—Ä–µ–∫—É—Å", "—É–∂–∏–Ω"]
        for meal in meals:
            recipes = await crud.get_recipes_by_meal_type(
                meal_type=meal, 
                include_premium=subscribed  # subscribed –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        )
        recipes_by_meal_type[meal] = [r['content'] for r in recipes]
        excel_file = generate_weekly_excel(recipes_by_meal_type)
        await message.answer_document(
            document=types.BufferedInputFile(
                file=excel_file.getvalue(),
                filename=f"weekly_menu_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
            ),
            caption="–í–∞—à–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é üí´"  
        )

def generate_weekly_excel(recipes_by_meal_type: dict):
    try:
        wb = Workbook()
        ws_menu = wb.active
        ws_menu.title = "–ú–µ–Ω—é"
        ws_shopping = wb.create_sheet("–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫")
        headers = ["–î–µ–Ω—å", "–ü—Ä–∏–µ–º –ø–∏—â–∏", "–ë–ª—é–¥–æ", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–ö–ë–ñ–£"]
        ws_menu.append(headers)
        bold_font = Font(bold=True)
        for col in range(1, len(headers) + 1):
            ws_menu.cell(row=1, column=col).font = bold_font
        days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        meals_order = ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "–ø–µ—Ä–µ–∫—É—Å", "—É–∂–∏–Ω"]
        day_totals = defaultdict(lambda: {'calories': 0, 'proteins': 0, 'fats': 0, 'carbs': 0})
        shopping_list = defaultdict(lambda: defaultdict(float))
        used_recipes = defaultdict(list)  # meal_type -> list of recently used recipe titles
        for day_idx, day in enumerate(days, start=2):
            day_row_start = ws_menu.max_row + 1
            for meal in meals_order:
                recipes = recipes_by_meal_type.get(meal, [])
                if not recipes:
                    continue
                try:
                    # We exclude repetitions for the last 2 days
                    recent = used_recipes[meal][-2:]
                    available_recipes = [r for r in recipes if parse_recipe_content(r)['title'] not in recent]
                    if not available_recipes:
                        available_recipes = recipes
                    recipe_content = random.choice(available_recipes)
                    parsed = parse_recipe_content(recipe_content)
                    used_recipes[meal].append(parsed['title'])
                    logging.debug(f"Parsed recipe content: {parsed}") 
                    if parsed['kbju']:
                        kbju = parsed['kbju'].split('/')
                        if len(kbju) == 4:
                            cals = int(kbju[0])
                            proteins = int(kbju[1])
                            fats = int(kbju[2])
                            carbs = int(kbju[3])
                            day_totals[day]['calories'] += cals
                            day_totals[day]['proteins'] += proteins
                            day_totals[day]['fats'] += fats
                            day_totals[day]['carbs'] += carbs
                    row = ws_menu.max_row + 1
                    ws_menu.cell(row=row, column=1, value=day)
                    ws_menu.cell(row=row, column=2, value=meal.capitalize())
                    ws_menu.cell(row=row, column=3, value=parsed['title'])
                    logging.debug(f"Ingredients: {parsed['ingredients']}")
                    logging.debug(f"Instructions: {parsed['instructions']}")
                    cell_ingredients = ws_menu.cell(row=row, column=4, value=parsed['ingredients'])
                    cell_ingredients.alignment = Alignment(wrap_text=True)
                    if parsed['instructions']:
                        cell_instructions = ws_menu.cell(row=row, column=5, value=parsed['instructions'])
                        cell_instructions.alignment = Alignment(wrap_text=True)
                    else:
                        logging.warning(f"[!] –ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞: {parsed['title']}")
                        ws_menu.cell(row=row, column=5, value="")
                    ws_menu.cell(row=row, column=6, value=parsed['kbju'])
                    if parsed['ingredients']:
                        for ingredient in parse_ingredients(parsed['ingredients']):
                            name, amount, unit = ingredient
                            shopping_list[(name.lower(), unit)]['amount'] += amount
                except Exception as e:
                    logging.error(f"Error processing {meal} for {day}: {str(e)}")
                    continue
            if day in day_totals:
                total = day_totals[day]
                total_kbju = f"{total['calories']}/{total['proteins']}/{total['fats']}/{total['carbs']}"
                ws_menu.append([day, "–ò—Ç–æ–≥–æ –ö–ë–ñ–£ –∑–∞ –¥–µ–Ω—å", "", "", "", total_kbju])
                for col in range(1, 7):
                    ws_menu.cell(row=ws_menu.max_row, column=col).font = bold_font
                    ws_menu.cell(row=ws_menu.max_row, column=col).fill = PatternFill(start_color="FFD3D3D3", fill_type="solid")
        ws_shopping.append(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ï–¥.–∏–∑–º."])
        for (name, unit), data in shopping_list.items():
            ws_shopping.append([name.capitalize(), round(data['amount'], 2), unit if unit else '-'])
        for col in range(1, 4):
            ws_shopping.cell(row=1, column=col).font = bold_font
        for ws in [ws_menu, ws_shopping]:
            for column in ws.columns:
                max_length = 0
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[get_column_letter(column[0].column)].width = adjusted_width
        buffer = BytesIO()
        wb.save(buffer)
        buffer.seek(0)
        return buffer
    except Exception as e:
        logging.error(f"Excel generation failed: {str(e)}")
        raise

async def handle_weekly_menu(callback: CallbackQuery, mode: str):
    user_id = callback.from_user.id
    pool = await asyncpg.create_pool(**DB_CONFIG)
    crud = RecipeCRUD(pool)

    try:
        # Checking subscription and limits as before (taking into account mode == "bulk" only for subscribers)
        async with pool.acquire() as conn:
            subscribed = await conn.fetchval(
                "SELECT subscribed FROM users WHERE user_id = $1", user_id
            )
            if not subscribed and mode == "daily":
                await callback.message.answer(
                    "–ì–æ—Ç–æ–≤–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º. üíé\n–û—Ñ–æ—Ä–º–∏—Ç–µ premium-–ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")
                    ]])
                )
                return
        meals = ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "–ø–µ—Ä–µ–∫—É—Å", "—É–∂–∏–Ω"]
        recipes_by_meal_type = {}
        for meal in meals:
            recipes = await crud.get_recipes_by_meal(meal_type=meal, subscribed=subscribed)
            recipes_by_meal_type[meal] = [r['content'] for r in recipes if 'content' in r]
        if not recipes_by_meal_type:
            await callback.message.answer("–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ üòî")
            return
        # Selecting an Excel Generator
        if mode == "daily":
            file = generate_weekly_excel(recipes_by_meal_type)
        else:
            file = generate_bulk_excel(recipes_by_meal_type)
        await callback.message.answer_document(
            document=types.BufferedInputFile(
                file=file.getvalue(),
                filename=f"weekly_menu_{mode}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
            ),
            caption="–í–∞—à–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤–æ! üí´"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_weekly_menu: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é")
    finally:
        await pool.close()

def generate_bulk_excel(recipes_by_meal_type: dict):
    try:
        wb = Workbook()
        ws_menu = wb.active
        ws_menu.title = "–ú–µ–Ω—é"
        ws_shopping = wb.create_sheet("–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫")

        headers = ["–î–µ–Ω—å", "–ü—Ä–∏–µ–º –ø–∏—â–∏", "–ë–ª—é–¥–æ", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–ö–ë–ñ–£"]
        ws_menu.append(headers)

        bold_font = Font(bold=True)
        for col in range(1, len(headers) + 1):
            ws_menu.cell(row=1, column=col).font = bold_font
        days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        meals_order = ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "–ø–µ—Ä–µ–∫—É—Å", "—É–∂–∏–Ω"]
        shopping_list = defaultdict(lambda: defaultdict(float))
        meal_cache = {} 
        kbju_totals = defaultdict(lambda: {'calories': 0, 'proteins': 0, 'fats': 0, 'carbs': 0})
        for i, day in enumerate(days, start=2):
            for meal in meals_order:
                recipes = recipes_by_meal_type.get(meal, [])
                if not recipes:
                    continue
                # We update the recipe every 2 days
                if i % 2 == 0 or meal not in meal_cache:
                    recipe_content = random.choice(recipes)
                    meal_cache[meal] = parse_recipe_content(recipe_content)
                parsed = meal_cache[meal]
                row = ws_menu.max_row + 1
                ws_menu.cell(row=row, column=1, value=day)
                ws_menu.cell(row=row, column=2, value=meal.capitalize())
                ws_menu.cell(row=row, column=3, value=parsed['title'])
                cell_ingredients = ws_menu.cell(row=row, column=4, value=parsed['ingredients'])
                cell_ingredients.alignment = Alignment(wrap_text=True)
                if parsed['instructions']:
                    cell_instructions = ws_menu.cell(row=row, column=5, value=parsed['instructions'])
                    cell_instructions.alignment = Alignment(wrap_text=True)
                else:
                    ws_menu.cell(row=row, column=5, value="")
                ws_menu.cell(row=row, column=6, value=parsed['kbju'])
                # Shopping list
                if parsed['ingredients']:
                    for name, amount, unit in parse_ingredients(parsed['ingredients']):
                        shopping_list[(name.lower(), unit)]['amount'] += amount
                # KBJU
                if parsed['kbju']:
                    kbju = parsed['kbju'].split('/')
                    if len(kbju) == 4:
                        kbju_totals[day]['calories'] += int(kbju[0])
                        kbju_totals[day]['proteins'] += int(kbju[1])
                        kbju_totals[day]['fats'] += int(kbju[2])
                        kbju_totals[day]['carbs'] += int(kbju[3])
            # KBJU per day
            if day in kbju_totals:
                total = kbju_totals[day]
                kbju_row = f"{total['calories']}/{total['proteins']}/{total['fats']}/{total['carbs']}"
                ws_menu.append([day, "–ò—Ç–æ–≥–æ –ö–ë–ñ–£ –∑–∞ –¥–µ–Ω—å", "", "", "", kbju_row])
                for col in range(1, 7):
                    ws_menu.cell(row=ws_menu.max_row, column=col).font = bold_font
                    ws_menu.cell(row=ws_menu.max_row, column=col).fill = PatternFill(start_color="FFD3D3D3", fill_type="solid")
        # Shopping list
        ws_shopping.append(["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ï–¥.–∏–∑–º."])
        for (name, unit), data in shopping_list.items():
            ws_shopping.append([name.capitalize(), round(data['amount'], 2), unit if unit else '-'])
        for col in range(1, 4):
            ws_shopping.cell(row=1, column=col).font = bold_font
        for ws in [ws_menu, ws_shopping]:
            for column in ws.columns:
                max_length = 0
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[get_column_letter(column[0].column)].width = adjusted_width
        buffer = BytesIO()
        wb.save(buffer)
        buffer.seek(0)
        return buffer

    except Exception as e:
        logging.error(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel (bulk): {str(e)}")
        raise

def parse_ingredients(ingredients_str: str) -> list:
    pattern = re.compile(
        r"^(?P<name>.*?)"                                   # Ingredient name
        r"(?:\s*[-‚Äì‚Äî]?\s*|\s+)"                             # Optional hyphen or just space
        r"(?P<amount>[\d.,/]+)?"                            # Quantity (optional)
        r"\s*(?P<unit>[–∞-—èa-z—ë–Å.]+)?"                       # Unit of measurement (optional)
        r"(?:\s*\(.*?\))?"                                  # Comments in brackets (ignored)
        r"(?:\s*–ø–æ –≤–∫—É—Å—É)?$",                               # "to taste" (optional)
        re.IGNORECASE
    )
    ingredients = []
    for line in ingredients_str.split('\n'):
        line = line.strip()
        if not line:
            continue
        match = pattern.match(line)
        if match:
            name = match.group("name").strip().capitalize()
            amount_str = match.group("amount")
            unit = (match.group("unit") or '').strip()
            if not amount_str and unit not in ["—à—Ç", "–ø—É—á–æ–∫", "–∑—É–±—á–∏–∫", "–ª–∏—Å—Ç", "–≤–µ—Ç–æ—á–∫–∞"]:
                continue  # skip ingredients without quantity

            try:
                if amount_str:
                    amount = float(eval(amount_str.replace(',', '.')))
                else:
                    amount = 1.0
            except:
                amount = 0.0
            if amount == 0:
                continue  
            ingredients.append((name, amount, unit))
        else:
            logging.warning(f"–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: {line}")
    return ingredients

def parse_recipe_content(content: str) -> dict:
    result = {
        'title': '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        'ingredients': '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
        'instructions': '   ',
        'kbju': ''
    }
    try:
        lines = [line.strip() for line in content.split('\n')]
        if not lines or all(not line for line in lines):
            return result
        result['title'] = lines[0]
        # Search KBZhU
        kbju_pattern = re.compile(r'–ö–ë–ñ–£\s*.*?(\d+/\d+/\d+/\d+)', re.IGNORECASE)
        for line in lines:
            match = kbju_pattern.search(line)
            if match:
                result['kbju'] = match.group(1)
                break
        ingredients = []
        instructions = []
        current_section = None
        # Using regular expressions to find sections
        for line in lines[1:]:
            # Check if the string starts with "Ingredients" or "Preparation"
            if re.fullmatch(r'–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\s*:?', line, re.IGNORECASE):
                current_section = 'ingredients'
                continue
            elif re.fullmatch(r'–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ\s*:?', line, re.IGNORECASE):
                current_section = 'instructions'
                continue
            elif re.search(r'–∫–±–∂—É', line, re.IGNORECASE):
                current_section = None
                continue
            # Processing section contents
            if current_section == 'ingredients' and line:
                ingredients.append(line.lstrip('‚Ä¢').strip())
            elif current_section == 'instructions' and line:
                instructions.append(line)
        # Save the results
        if ingredients:
            result['ingredients'] = '\n'.join(ingredients)
        if instructions:
            result['instructions'] = '\n'.join(instructions)
    except Exception as e:
        logging.error(f"Error parsing recipe: {str(e)}")
    return result
  
@dp.message(F.text == "–ü–æ–¥–ø–∏—Å–∫–∞ üîì")
async def subscription_info(message: types.Message):
    text = (
        "*–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à –±–æ—Ç!*üôè\n"
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –∑–∞ 990 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏–º! üöÄ\n"
        "–ê –ø–æ–∫–∞ —Ç—ã –º–æ–∂–µ—Ç–µ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∫—É—Å–Ω–µ–π—à–∏–µ —Ä–∞—Ü–∏–æ–Ω–∞–º–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ! ü•ó\n"
        "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏–º –æ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞, –∏ –∫–∞–∫ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º —Å–æ —Å–∫–∏–¥–∫–æ–π 20% –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É *–¢–ï–°–¢–ë–û–¢*üéâ\n"
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back_to_main(message: types.Message):
    # Check if the user is registered
    pool = await asyncpg.create_pool(**DB_CONFIG)
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT * FROM users WHERE user_id = $1', message.from_user.id)
    await pool.close()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await main_kb(is_registered=bool(user)))

@dp.message(F.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üì©")
async def start_feedback(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.")
    await state.set_state(FeedbackForm.waiting_for_message)

@dp.message(FeedbackForm.waiting_for_message)
async def save_feedback(message: types.Message, state: FSMContext):
    pool = await asyncpg.create_pool(**DB_CONFIG)
    try:
        async with pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO feedback (user_id, message, created_at) VALUES ($1, $2, $3)",
                message.from_user.id,
                message.text,
                datetime.now()
            )
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    finally:
        await pool.close()
    await state.clear()
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())